import{r as d,j as i,o as y,z as f,S as I}from"./index-Dt07UTka.js";var c="Progress",m=100,[w,C]=y(c),[E,M]=w(c),g=d.forwardRef((e,r)=>{const{__scopeProgress:n,value:t=null,max:a,getValueLabel:u=R,...h}=e;(a||a===0)&&!p(a)&&console.error(V(`${a}`,"Progress"));const o=p(a)?a:m;t!==null&&!v(t,o)&&console.error(j(`${t}`,"Progress"));const s=v(t,o)?t:null,$=l(s)?u(s,o):void 0;return i.jsx(E,{scope:n,value:s,max:o,children:i.jsx(f.div,{"aria-valuemax":o,"aria-valuemin":0,"aria-valuenow":l(s)?s:void 0,"aria-valuetext":$,role:"progressbar","data-state":N(s,o),"data-value":s??void 0,"data-max":o,...h,ref:r})})});g.displayName=c;var x="ProgressIndicator",P=d.forwardRef((e,r)=>{const{__scopeProgress:n,...t}=e,a=M(x,n);return i.jsx(f.div,{"data-state":N(a.value,a.max),"data-value":a.value??void 0,"data-max":a.max,...t,ref:r})});P.displayName=x;function R(e,r){return`${Math.round(e/r*100)}%`}function N(e,r){return e==null?"indeterminate":e===r?"complete":"loading"}function l(e){return typeof e=="number"}function p(e){return l(e)&&!isNaN(e)&&e>0}function v(e,r){return l(e)&&!isNaN(e)&&e<=r&&e>=0}function V(e,r){return`Invalid prop \`max\` of value \`${e}\` supplied to \`${r}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${m}\`.`}function j(e,r){return`Invalid prop \`value\` of value \`${e}\` supplied to \`${r}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${m} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`}var b=g,_=P;const S=d.forwardRef(({className:e,value:r,...n},t)=>{const a=typeof r=="number"&&!Number.isNaN(r)?r:0,u=Math.min(Math.max(a,0),100);return i.jsx(b,{ref:t,className:I("relative h-4 w-full overflow-hidden rounded-full bg-muted",e),...n,children:i.jsx(_,{className:"h-full bg-primary transition-[width]",style:{width:`${u}%`}})})});S.displayName=b.displayName;export{S as P};
